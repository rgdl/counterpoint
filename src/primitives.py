# TODO: some of these are more "data" than "code"
# TODO: as an integration test, represent a correct example and an incorrect example from the book
import numpy as np

from . import constants

# All rules here:
# /Users/robertdelisle/Documents/Gradus Ad Parnassum Summarised.docx


class Arrangement:
    def __init__(self, n_voices, species, cantus_firmus=None):
        # Use the arguments to generate a numpy matrix.
        # Rows are voices, columns are time steps
        # Cantus firmus, if supplied, should be inserted into one row
        pass


class Mode:
    pass


class Pitch:
    """
    Make use of `NOTE_LOOKUP` in constants.py
    """


class TimeUnit:
    BAR = 'BAR'
    MINIM = 'MINIM'
    CROTCHET = 'CROTCHET'
    QUAVER = 'QUAVER'


class Voice:
    # TODO:
    # there should be an Arrangement that wraps a numpy matrix.
    # then a Voice just needs a reference to the arrangement and a row number
    # A lot of the logic could then be handled by matrix algebra, including finding errors
    # Counterpoint could be generated by stepping through an arrangement, branching through all possibilities, and dropping those that hit a dead end
    pass


class Interval:
    pass


class HarmonicInterval(Interval):
    pass


class MelodicInterval(Interval):
    pass


# TODO: this isn't a primitive, it's a description of what's going on in two voices
class Motion:
    DIRECT = 'DIRECT'
    OBLIQUE = 'OBLIQUE'
    CONTRARY = 'CONTRARY'


class Species:
    FIRST = 'FIRST'
    SECOND = 'SECOND'
    THIRD = 'THIRD'
    FOURTH = 'FOURTH'
    FLORID = 'FLORID'


class Tie:
    pass


class Note:
    def __init__(self, note_name=None, octave=None, note_number=None):
        assert any([
            note_name is None and octave is None and note_number in constants.NOTE_NUMBERS,
            note_name in constants.NOTE_NAMES and octave in constants.OCTAVES and note_number is None,
        ]), "Invalid arguments - require (name AND octave) XOR (number)"

        if note_number is not None:
            self.note_number = note_number
        else:
            self.note_number = constants.get_note_number(note_name, octave)
